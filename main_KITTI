import numpy as np
import torch
from datetime import datetime
from Linear_sysmdl import SystemModel
from Extended_data import N_E, N_CV, N_T

from KalmanFilter_test import KFTest
from RTS_Smoother_test import S_Test

from filing_paths import path_model, path_session
import sys
sys.path.insert(1, path_model)
from model import load_kittidata, F_kitti, H_kitti, delta_t, lambda_q, lambda_r, Q, R, m, n, m2_0


print("Pipeline Start")

################
### Get Time ###
################
today = datetime.today()
now = datetime.now()
strToday = today.strftime("%m.%d.%y")
strNow = now.strftime("%H:%M:%S")
strTime = strToday + "_" + strNow
print("Current Time =", strTime)
path_results = 'RTSNet/'

##################
### Load KITTI ###
##################

####################
### Design Model ###
####################
r = lambda_r[0]
q = lambda_q[0]
print("1/r2 [dB]: ", 10 * torch.log10(1/(r**2)))
print("1/q2 [dB]: ", 10 * torch.log10(1/(q**2)))

T = round(ground_truth_0001.size()[-1] * 0.8)
T_test = ground_truth_0001.size()[-1] - T
m1_0 = ground_truth_0001[:,0]


# True model 
sys_model = SystemModel(F_kitti, q, Q, H_kitti, r, R, T, T_test,m,n)
sys_model.InitSequence(m1_0, m2_0)

########################
### Generate dataset ###
########################
# Training dataset
train_target = torch.cat(int(N_E)*[ground_truth_0001[:,0:T]])
train_target = train_target + torch.randn_like(train_target) * q # True state; additive Gaussian Noise

noise_free_obs = torch.matmul(H_kitti, ground_truth_0001[:,0:T])
noise_free_obs = torch.cat(int(N_E)*[noise_free_obs])
train_input = noise_free_obs + torch.randn_like(noise_free_obs) * r # Observations; additive Gaussian Noise

# CV dataset
cv_target = torch.cat(int(N_CV)*[ground_truth_0001[:,0:T]])
cv_target = cv_target + torch.randn_like(cv_target) * q # True state; additive Gaussian Noise

noise_free_obs = torch.matmul(ground_truth_0001[:,0:T],H_kitti)
noise_free_obs = torch.cat(int(N_CV)*[noise_free_obs])
cv_input = noise_free_obs + torch.randn_like(noise_free_obs) * r # Observations; additive Gaussian Noise

# Testing dataset
test_target = torch.cat(int(N_T)*[ground_truth_0001[:,T:]])
test_target = test_target + torch.randn_like(test_target) * q # True state; additive Gaussian Noise

noise_free_obs = torch.matmul(ground_truth_0001[:,T:],H_kitti)
noise_free_obs = torch.cat(int(N_T)*[noise_free_obs])
test_input = noise_free_obs + torch.randn_like(noise_free_obs) * r # Observations; additive Gaussian Noise


##############################
### Evaluate Kalman Filter ###
##############################
print("Evaluate Kalman Filter True")
[MSE_KF_linear_arr, MSE_KF_linear_avg, MSE_KF_dB_avg] = KFTest(sys_model, test_input, test_target)

##############################
### Evaluate RTS Smoother ###
##############################
print("Evaluate RTS Smoother True")
[MSE_RTS_linear_arr, MSE_RTS_linear_avg, MSE_RTS_dB_avg] = S_Test(sys_model, test_input, test_target)





